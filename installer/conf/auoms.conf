
# The path to the unix domain socket where mesages are to be sent.
# A value of '-' may be used to instead write messages to stdout.
#
output_path = /var/opt/microsoft/auoms/sock/omsagent.sock

# The output message format. Valid values are ('json', and 'msgpack')
#
# output_format = json

# The value to use for the tag or source of output messages.
# For fluentd this is the tag value.
#
message_label = oms.audit

# The event mode. If 'event' then one message per event is output.
# If 'record' then one message per event record is output.
#
mode = oms

# The path to the input queue file. The input queue file is used to persist
# events that have been read from stdin (i.e. audispd) but not yet processed.
# When the input queue is full, older events are removed to make room for
# new events.
#
#in_queue_file = /var/opt/microsoft/auoms/data/in_queue.dat

# The size of the event input queue file.
#
#in_queue_size = 10485760

# The path to the output queue file. The output queue file is used to persist
# events that are ready to be transformed and transmitted.
# Events are transferred from the input queue to the output queue only when
# there is space available in the output queue.
#
#out_queue_file = /var/opt/microsoft/auoms/data/out_queue.dat

# The size of the event output queue file.
#
#in_queue_size = 131072

# Newer versions of fluentD support subsec event time via a msgpack
# extension type. If this parameter is true, then event times are encoded
# using the msgpack extension type.
#
#msgpack_ext_time = false

# If true, the raw record text is included in the message. The field name
# is controled by the 'RawTextFieldName parameter.
#
#include_full_raw_text = true

# The name of the field that will contain the raw event record text.
#
#raw_text_field_name = raw

# The valid values are: "RAW", "INTERP", or "BOTH". If "raw", then
# emit the raw event record values. If "INTERP", then emit the
# interpreted event record values. If "BOTH", them emit both the raw and
# interpreted event record values and the field names are controlled by the
# parameters "field_name_dedup_suffix_raw_field" and "field_suffix".
#
#field_emit_mode = both

# When the message mode is 'event', then each event record field is
# prefixed the record index or type (controlled by FieldPrefixMode). This
# parameter specified what text to use to separate the record type from
# the field name.
#
#field_name_separator = -

# This parameter controls how the field name record type prefix value
# is encoded. The possible values are:
#     INDEX - The index of the record within the event.
#     TYPE_NUMBER - The raw record type number.
#     TYPE_NAME - The record type name. If the number cannot be translated
#                 into a name, then the format "Unknown[<number>]" will
#                 be used where '<number>' is the record type number.
#
#field_prefix_mode = TYPE_NAME

# The name to be used for the event timestamp field.
#
#timestamp_field_name = timestamp

# The name to be used for the event serial field.
#
#serial_field_name = serial

# The name to be used for the message type field.
#
#msg_type_field_name = type

# When the message mode is 'event', the number of records in the event is
# emitted. This parameter controls the name of that emitted field.
#
#record_count_field_name = record-count

# The name of the field where the event record type number is recorded.
# If the message mode is 'event' then the value is a comma separated list
# of record type numbers and the default field name is "record-types"
#
#record_type_field_name = record-type

# The name of the field where the event record type name is recorded.
# If the message mode is 'event' then the value is a comma separated list
# of record type names and the default field name is "record-names"
#
#record_name_field_name = record-name

# If multiple records of the same type are present in the same event
# then the field names will need to be deduped. This is accomplished
# by including the record index in the field name. If true, then the
# index values are 1 based, otherwise 0 based.
#
#field_name_dedup_index_one_based = true

# If multiple records of the same type are present in the same event
# then the field names will need to be deduped. This is accomplished
# by including the record index in the field name. If true, then the
# index of the record within the event is used. Otherwise, the index
# is the index within the set of records of the same type.
#
#field_name_dedup_index_global = false

# When field_emit_mode is set to "BOTH" then the raw and interpreted
# field names need to be deduped. If true, the raw field has a suffix
# added to it. If false, the interpreted field has a suffix added to it.
# The suffix value is specified by the parameter 'FieldSuffix'.
#
#field_name_dedup_suffix_raw_field = false

# The suffix to add to raw or interpreted value field name when
# field_emit_mode is set to "BOTH"
#
#field_suffix = -i

# If true, remove '"' surrounding string field values and decode
# HEX encoded field values.
#
#decode_escaped_field_values = true

# If DecodeEscapedFieldValues is true, then decoded HEX values might
# contain null ('\0') characters. Null characters are not allowed in
# C strings or JSON. So, Null characters are replaced with the string
# specified in this parameter.
#
null_replacement = "\0"

# Override the record_type code to record_type name translation provided by libaudit
# for a specific set of record_type_codes. This can be helpfull in cases where the
# kernel is generating audit records not yet recognized by libaudit.
#
# This property expects a valid JSON object/map. The value starts with '{'
# and ends with '}' and may span multiple lines.
#
# For example:
# The Ubuntu 14.04 kernel generates PROCTITLE (code 1327) records but libaudit doesn't recognize
# that code. So, a property value of '{ 1327: "PROCTITLE" }' would ensure
# that on output, the record_type name would be PROCTITLE instead of UNKNOWN[1327]
#
record_type_name_overrides = {
1327: "PROCTITLE"
}

# Override field names. When field_emit_mode is RAW or BOTH, this override is applied to
# the field name of the raw value. When field_emit_mode is BOTH, this override takes precedence
# if field_name_dedup_suffix_raw_field=true. Instead of appending field_suffix, the override
# name will be used.
#
# This property expects a valid JSON object/map. The value starts with '{'
# and ends with '}' and may span multiple lines.
#
# For example, if one wants to have 'uid' output as 'user_id', one could use a
# property value of '{ "uid": "user_id" }'
#
#field_name_overrides = {}

# Override field names. When field_emit_mode is INTERP or BOTH, this override is applied to
# to the interpreted value. When field_emit_mode is BOTH, this override takes precedence
# if field_name_dedup_suffix_raw_field=false. Instead of appending field_suffix, the override
# name will be used.
#
# This property expects a valid JSON object/map. The value starts with '{'
# and ends with '}' and may span multiple lines.
#
# For example, if one wants to have interpreted 'uid' output as 'user_name',
# one could use a property value of '{ "uid": "user_name" }'
#
interpreted_field_names = {
"uid": "user",
"auid": "audit_user",
"euid": "effective_user",
"suid": "set_user",
"fsuid": "filesystem_user",
"inode_uid": "inode_user",
"oauid": "o_audit_user",
"ouid": "o_user",
"obj_uid": "obj_user",
"sauid": "sender_audit_user",
"gid": "group",
"egid": "effective_group",
"fsgid": "filesystem_group",
"inode_gid": "inode_group",
"new_gid": "new_group",
"obj_gid": "obj_group",
"ogid": "owner_group",
"sgid": "set_group"
}
